[1mdiff --git a/arduino/robot/SerialCommunicate.cpp b/arduino/robot/SerialCommunicate.cpp[m
[1mindex 6f51791..460f6ca 100644[m
[1m--- a/arduino/robot/SerialCommunicate.cpp[m
[1m+++ b/arduino/robot/SerialCommunicate.cpp[m
[36m@@ -1,16 +1,10 @@[m
 #include <Arduino.h>[m
 [m
 #include "SerialCommunicate.h"[m
[32m+[m[32m#include "vector.hpp"[m
 [m
 cmd::CommandProtocol::CommandProtocol(){[m
 [m
[31m-}[m
[31m-[m
[31m-cmd::CommandProtocol::~CommandProtocol(){[m
[31m-[m
[31m-}[m
[31m-[m
[31m-bool cmd::CommandProtocol::computeCheckSum(const uint8_t *packet, uint8_t packetLength, uint8_t *checkSum_1, uint8_t *checkSum_2){[m
 	/*[m
 		1      2      3           4   5          6         +N[m
 		0      1      2           3   4          5         +N[m
[36m@@ -22,51 +16,31 @@[m [mbool cmd::CommandProtocol::computeCheckSum(const uint8_t *packet, uint8_t packet[m
 [m
 	// dataLength smaller than minumum required(header length). also avoid for invalid data input(e.g. {'$', 0x14} 0xFF ... )[m
 	//                                                                                                 ^size is 2  ^data[2][m
[31m-	if(!_validPacket(packet, packetLength)){[m
[31m-		return false;[m
[31m-	}[m
 [m
[31m-	uint8_t tmp_checkSum_1 = 0, tmp_checkSum_2 = 0;[m
[31m-	uint8_t packet_size = packet[Packet_SIZE];[m
[31m-	uint8_t CMD = packet[Command];[m
[32m+[m[32m}[m
 [m
[31m-	tmp_checkSum_1 = packet_size ^ CMD;[m
[31m-	for(uint8_t i = HeaderLength; i< packet_size; ++i){[m
[31m-		tmp_checkSum_1 ^= packet[i];[m
[31m-	}[m
[31m-	tmp_checkSum_1 &= 0xFE;[m
[31m-	tmp_checkSum_2 = (~tmp_checkSum_1) & 0xFE;[m
[32m+[m[32mcmd::CommandProtocol::~CommandProtocol(){[m
 [m
[31m-	*checkSum_1 = tmp_checkSum_1;[m
[31m-	*checkSum_2 = tmp_checkSum_2;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mbool cmd::CommandProtocol::packetValid(const vector<uint8_t> &packet){[m
 [m
[31m-	return true;[m
 }[m
 [m
[31m-bool cmd::CommandProtocol::isCheckSumValid(const uint8_t *packet, uint8_t packetLength){[m
[31m-	[m
[31m-	if(!_validPacket(packet, packetLength)){[m
[31m-		return false;[m
[31m-	}[m
[31m-	uint8_t checkSum_1, checkSum_2;[m
[32m+[m[32mvector<uint8_t> cmd::CommandProtocol::buildPacket(const vector<uint8_t> &inputData){[m
 [m
[31m-	computeCheckSum(packet, packetLength, &checkSum_1, &checkSum_2);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mbool cmd::CommandProtocol::parsePacket(const vector<uint8_t> &packet){[m
[32m+[m
[32m+[m[32m}[m
 [m
[31m-	return packet[CheckSum_1] == checkSum_1 && packet[CheckSum_2] == checkSum_2;	[m
[32m+[m[32mcmd::Command_Type cmd::CommandProtocol::command(){[m
[32m+[m	[32mreturn _command;[m
 }[m
 [m
[31m-bool cmd::CommandProtocol::_validPacket(const uint8_t *packet, uint8_t packetLength){[m
[31m-	if(packetLength < HeaderLength){[m
[31m-		return false;[m
[31m-	}[m
[31m-	if(packet[Packet_SIZE] != packetLength){[m
[31m-		return false;	[m
[31m-	}[m
[31m-	if(packet[Start1] != '$' || packet[Start2] != 0x14){[m
[31m-		return false;[m
[31m-	}[m
[31m-[m
[31m-	return true;[m
[32m+[m[32mvector<uint8_t> cmd::CommandProtocol::data(){[m
[32m+[m	[32mreturn _data;[m
 }[m
 [m
 SerialCommunicate::SerialCommunicate(int bufferSize):_bufferSize(bufferSize){[m
[1mdiff --git a/arduino/robot/SerialCommunicate.h b/arduino/robot/SerialCommunicate.h[m
[1mindex 287e340..c6750ea 100644[m
[1m--- a/arduino/robot/SerialCommunicate.h[m
[1m+++ b/arduino/robot/SerialCommunicate.h[m
[36m@@ -1,6 +1,8 @@[m
 #ifndef SERIALCOMMUNICATE[m
 #define SERIALCOMMUNICATE[m
 [m
[32m+[m[32m#include "vector.hpp"[m
[32m+[m
 #define CMD_HEADER_LENGTH 6[m
 [m
 namespace cmd{[m
[36m@@ -8,7 +10,8 @@[m [mnamespace cmd{[m
 enum Command_Type{[m
 	MOVE_CARTESIAN,[m
 	MOVE_POLAR,[m
[31m-	IMU_YPR[m
[32m+[m	[32mIMU_YPR,[m
[32m+[m	[32mERROR[m
 };[m
 [m
 class CommandProtocol{[m
[36m@@ -25,11 +28,18 @@[m [mclass CommandProtocol{[m
 	public:[m
 		CommandProtocol();[m
 		~CommandProtocol();[m
[31m-		bool computeCheckSum(const uint8_t *packet, uint8_t packetLength, uint8_t *checkSum_1, uint8_t *checkSum_2);[m
[31m-		bool isCheckSumValid(const uint8_t *packet, uint8_t packetLength);[m
[32m+[m
[32m+[m		[32mbool packetValid(const vector<uint8_t> &packet);[m
[32m+[m		[32mvector<uint8_t> buildPacket(Command_Type inputCommand, const vector<uint8_t> &inputData);[m[41m	[m
[32m+[m		[32mbool parsePacket(const vector<uint8_t> &packet);[m
[32m+[m		[32mCommand_Type command();[m
[32m+[m		[32mvector<uint8_t> data();[m
[32m+[m
 	private:[m
 		static constexpr uint8_t HeaderLength = CMD_HEADER_LENGTH;[m
[31m-		bool _validPacket(const uint8_t *packet, uint8_t packetLength);[m
[32m+[m[41m		[m
[32m+[m		[32mCommand_Type _command;[m
[32m+[m		[32mvector<uint8_t> _data;[m[41m		[m
 [m
 		enum HEADER_INFO{[m
 			Start1, Start2, Packet_SIZE, Command, CheckSum_1, CheckSum_2[m
[1mdiff --git a/arduino/robot/vector.hpp b/arduino/robot/vector.hpp[m
[1mindex f8ec869..3ea9a91 100644[m
[1m--- a/arduino/robot/vector.hpp[m
[1m+++ b/arduino/robot/vector.hpp[m
[36m@@ -24,7 +24,7 @@[m [mclass vector{[m
 		vector& operator=(vector&& other); // move assignment[m
 	[m
 	private:[m
[31m-		size_t DEFAULT_BUFFER_SIZE = 50;[m
[32m+[m		[32msize_t DEFAULT_BUFFER_SIZE = 30;[m
 		size_t _buffer_size = DEFAULT_BUFFER_SIZE;[m
 		size_t _size = 0;[m
 [m
